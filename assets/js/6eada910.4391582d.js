"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[326],{2630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=t(4848),i=t(8453);const s={sidebar_position:2},o="Tutorial",a={id:"getting-started/tutorial",title:"Tutorial",description:"Learn how to create a handler using Spring MVC and generate documentation using a Kotlin DSL class for that handler.",source:"@site/docs/getting-started/tutorial.md",sourceDirName:"getting-started",slug:"/getting-started/tutorial",permalink:"/rest-docs-kdsl/docs/getting-started/tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/rest-docs-kdsl/docs/getting-started/setup"},next:{title:"Guides",permalink:"/rest-docs-kdsl/docs/category/guides"}},d={},l=[{value:"1. Create a Handler",id:"1-create-a-handler",level:2},{value:"2. Compile the Source Code",id:"2-compile-the-source-code",level:2},{value:"3. Verify DSL File Generation",id:"3-verify-dsl-file-generation",level:2},{value:"4. Write a Test Case",id:"4-write-a-test-case",level:2},{value:"5. Write the HTTP Components DSL",id:"5-write-the-http-components-dsl",level:2},{value:"6. Write the Component DSL",id:"6-write-the-component-dsl",level:2},{value:"7. Run the Test",id:"7-run-the-test",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tutorial",children:"Tutorial"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to create a handler using Spring MVC and generate documentation using a Kotlin DSL class for that handler."}),"\n",(0,r.jsx)(n.h2,{id:"1-create-a-handler",children:"1. Create a Handler"}),"\n",(0,r.jsx)(n.p,{children:"Let's start by creating a Spring handler that maps a request."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@GetMapping("/tutorial")\nfun tutorial(\n    @RequestParam id: String,\n): TutorialResponse {\n    return TutorialResponse(id, 1)\n}\n\ndata class TutorialResponse(\n    val id: String,\n    val num: Int,\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"2-compile-the-source-code",children:"2. Compile the Source Code"}),"\n",(0,r.jsx)(n.p,{children:"Compile the source code by running the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"./gradlew compileKotlin\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-verify-dsl-file-generation",children:"3. Verify DSL File Generation"}),"\n",(0,r.jsxs)(n.p,{children:["Check that the file ",(0,r.jsx)(n.code,{children:"TutorialApiSpec.kt"})," has been generated under the ",(0,r.jsx)(n.code,{children:"/build/generated/ksp/main/kotlin/${PACKAGE_OF_THE_HANDLER}/dsl"})," package."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"TutorialApiSpec.kt"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'public object TutorialApiResponseBody : FieldComponent(false) {\n  public val id: FieldValue = FieldValue("id", false, 0)\n\n  public val num: FieldValue = FieldValue("num", false, 0)\n\n  init {\n    addValues(\n      `id`,\n      `num`\n    )\n  }\n}\n\npublic object TutorialApiQueryParameter : ApiComponent<ParameterDescriptor>() {\n  public val id: QueryParameterValue = QueryParameterValue("id")\n\n  init {\n    addValues(\n      `id`\n    )\n  }\n}\n\npublic data class TutorialApiSpec(\n  override val identifier: String,\n) : ApiSpec,\n    ResponseBodySnippetGenerator<TutorialApiResponseBody>,\n    QueryParameterSnippetGenerator<TutorialApiQueryParameter> {\n  override val snippets: MutableList<Snippet> = mutableListOf()\n\n  override fun getResponseBodyApiComponent(): TutorialApiResponseBody = TutorialApiResponseBody\n\n  override fun getQueryParameterApiComponent(): TutorialApiQueryParameter =\n      TutorialApiQueryParameter\n\n  override fun addSnippet(generatedSnippet: Snippet) {\n    this.snippets.add(generatedSnippet)\n  }\n\n  override fun addSnippets(generatedSnippets: List<Snippet>) {\n    this.snippets.addAll(generatedSnippets)\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This file contains the classes that enable DSL-based documentation for the handler.\n(If you've used Querydsl before, think of it as analogous to Q classes.)"}),"\n",(0,r.jsxs)(n.p,{children:["You can start documenting by using the class that implements ",(0,r.jsx)(n.code,{children:"ApiSpec"})," (in this example, ",(0,r.jsx)(n.code,{children:"TutorialApiSpec"}),').\nThe naming convention for this class is the handler function name plus "ApiSpec".']}),"\n",(0,r.jsx)(n.h2,{id:"4-write-a-test-case",children:"4. Write a Test Case"}),"\n",(0,r.jsxs)(n.p,{children:["Create an instance of the ",(0,r.jsx)(n.code,{children:"ApiSpec"})," implementation\nand pass it as an argument to the ",(0,r.jsx)(n.code,{children:"io.github.cares0.restdocskdsl.dsl.document"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@Test\nfun tutorial() {\n    mockMvc.post("/tutorial") {\n        requestAttr(RestDocumentationGenerator.ATTRIBUTE_NAME_URL_TEMPLATE, "/tutorial")\n        contentType = MediaType.APPLICATION_JSON\n        characterEncoding = StandardCharsets.UTF_8.name()\n        content = createJson(ExampleController.SimpleRequest.FIXTURE)\n        header("X-Csrf-Token", "token")\n    }.andExpectAll {\n        status { isOk() }\n    }.andDo {\n        print()\n        document(TutorialApiSpec("tutorial")) {\n        \n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The constructor parameter should be the identifier for the documentation.\nThe second parameter is a function with the ",(0,r.jsx)(n.code,{children:"ApiSpec"})," implementation as the receiver."]}),"\n",(0,r.jsx)(n.h2,{id:"5-write-the-http-components-dsl",children:"5. Write the HTTP Components DSL"}),"\n",(0,r.jsxs)(n.p,{children:["In the function block of the ",(0,r.jsx)(n.code,{children:"document"})," function's second parameter,\nyou can call functions corresponding to the HTTP components\n(e.g., request parameters, response body) defined in the API spec to write the DSL."]}),"\n",(0,r.jsxs)(n.p,{children:["The API we created above includes request parameters and a response body,\nso you can call ",(0,r.jsx)(n.code,{children:"queryParameters"})," and ",(0,r.jsx)(n.code,{children:"responseBody"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'document(TutorialApiSpec("tutorial")) {\n    queryParameters {\n    }\n    responseBody {\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For more details on the available functions for each component,\nrefer to ",(0,r.jsx)(n.a,{href:"/rest-docs-kdsl/docs/guides/dsl-interface#http-component-dsl",children:"HTTP Components DSL"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"6-write-the-component-dsl",children:"6. Write the Component DSL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'document(TutorialApiSpec("tutorial")) {\n    queryParameters {\n        id means "Id" typeOf STRING\n    }\n    responseBody {\n        id means "Id" typeOf STRING\n        num means "Number" typeOf NUMBER\n    }\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:['The request parameters for the API we created include "id", and the response body contains "id" and "num" fields.\nThese fields are declared as properties of the receiver object in the function blocks.\n(Refer to the ',(0,r.jsx)(n.code,{children:"TutorialApiQueryParameter"})," and ",(0,r.jsx)(n.code,{children:"TutorialApiResponseBody"})," classes in the ",(0,r.jsx)(n.code,{children:"TutorialApiSpec.kt"})," file.)"]}),"\n",(0,r.jsx)(n.p,{children:"You can document these fields by calling their properties and using infix functions."}),"\n",(0,r.jsxs)(n.p,{children:["For more details on the available infix functions,\nrefer to ",(0,r.jsx)(n.a,{href:"../guides/dsl-interface#component-dsl",children:"Component DSL"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"7-run-the-test",children:"7. Run the Test"}),"\n",(0,r.jsx)(n.p,{children:"After everything is written, run the test."}),"\n",(0,r.jsxs)(n.p,{children:["Check the generated snippets under ",(0,r.jsx)(n.code,{children:"build/generated-snippets/${DOCUMENT_IDENTIFIER}"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This library does not support creating and integrating Asciidoc documents from the generated snippets,\nso continue using Spring REST Docs as before.\nFor more details, refer to ",(0,r.jsx)(n.a,{href:"https://docs.spring.io/spring-restdocs/docs/current/reference/htmlsingle/#working-with-asciidoctor",children:"Working with Asciidoctor"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["Now that you've learned the basics of using this library through the tutorial,\nI recommend exploring the ",(0,r.jsx)(n.a,{href:"../guides/dsl-interface",children:"DSL Interface"})," documentation\nto understand how this library provides DSL functionality."]}),"\n",(0,r.jsx)(n.p,{children:"If you prefer to write test cases first, you can implement the DSL interface directly to create documentation."}),"\n",(0,r.jsxs)(n.p,{children:["For more detailed usage examples, refer to the ",(0,r.jsx)(n.code,{children:"example"})," package in the GitHub repository,\nwhich demonstrates the full capabilities of this library."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);