"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[264],{9591:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>c});var i=s(4848),t=s(8453);const d={sidebar_position:1},r="DSL Interface",o={id:"guides/dsl-interface",title:"DSL Interface",description:"This section describes the interfaces designed to provide DSL capabilities.",source:"@site/versioned_docs/version-1.0.4/guides/dsl-interface.md",sourceDirName:"guides",slug:"/guides/dsl-interface",permalink:"/rest-docs-kdsl/docs/guides/dsl-interface",draft:!1,unlisted:!1,tags:[],version:"1.0.4",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/rest-docs-kdsl/docs/category/guides"},next:{title:"DSL Generation Conditions",permalink:"/rest-docs-kdsl/docs/guides/dsl-generation-condition"}},l={},c=[{value:"Overall Structure",id:"overall-structure",level:2},{value:"HTTP Component DSL",id:"http-component-dsl",level:2},{value:"Component DSL",id:"component-dsl",level:2},{value:"Available infix notations",id:"available-infix-notations",level:3},{value:"ApiFieldType",id:"apifieldtype",level:3},{value:"Nested JSON Fields",id:"nested-json-fields",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dsl-interface",children:"DSL Interface"})}),"\n",(0,i.jsx)(n.p,{children:"This section describes the interfaces designed to provide DSL capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"overall-structure",children:"Overall Structure"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"structure",src:s(9762).A+"",width:"2438",height:"1200"})}),"\n",(0,i.jsx)(n.p,{children:"In Spring MVC, HTTP requests and responses are mapped via handlers."}),"\n",(0,i.jsx)(n.p,{children:"The components that make up HTTP requests and responses (query parameters, path variables, body, etc.)\nare mapped to the handler's annotations, parameters, and return types."}),"\n",(0,i.jsx)(n.p,{children:"Spring REST Docs helps document these components\nby providing a way to describe the fields that make up each component and integrate them into documentation."}),"\n",(0,i.jsxs)(n.p,{children:["In Spring REST Docs, fields within each component are represented by ",(0,i.jsx)(n.code,{children:"AbstractDescriptor"}),",\nwhich is then combined into a ",(0,i.jsx)(n.code,{children:"Snippet"}),".\nThe combined ",(0,i.jsx)(n.code,{children:"Snippet"})," is ultimately handled by the ",(0,i.jsx)(n.code,{children:"document"})," function, which, together with the document's identifier,\nprocesses the API call results to finally generate snippets in formats like Asciidoc."]}),"\n",(0,i.jsx)(n.p,{children:"This library offers DSL capabilities while aligning with Spring REST Docs' structure\nby providing four main interfaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ApiField"}),", corresponding to ",(0,i.jsx)(n.code,{children:"AbstractDescriptor"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ApiComponent"}),", corresponding to ",(0,i.jsx)(n.code,{children:"Snippet"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ApiSpec"}),", which integrates all ",(0,i.jsx)(n.code,{children:"Snippet"}),"s for a single API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SnippetGenerator"}),", which converts the written DSL into ",(0,i.jsx)(n.code,{children:"Snippet"}),"s."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, there's an interface called ",(0,i.jsx)(n.code,{children:"HandlerElement"})," that doesn\u2019t provide a DSL\nbut captures the necessary information from the handler\u2019s elements and converts them into ",(0,i.jsx)(n.code,{children:"ApiField"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s look at these four interfaces using a simple HTTP API example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'HTTP Message\n\nRequest\nGET /some-api?id=abc&num=5 HTTP/1.1\nContent-Type: application/json\n\nResponse \nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 85\n{\n    "data": "some data"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Given an API communicating with messages like the one above,\nthe components and fields extracted are as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Field"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Query Parameter"}),(0,i.jsx)(n.td,{children:"id, num"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Response Body"}),(0,i.jsx)(n.td,{children:"data"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ApiField"})," is the DSL interface that allows you to document the fields listed in the table above."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ApiComponent"})," interface integrates these ",(0,i.jsx)(n.code,{children:"ApiField"})," properties by component."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ApiComponent"})," generated is then handled by a suitable ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," in the ",(0,i.jsx)(n.code,{children:"ApiSpec"})," implementation,\nallowing the DSL functions to be invoked."]}),"\n",(0,i.jsxs)(n.p,{children:["Once an ",(0,i.jsx)(n.code,{children:"ApiComponent"})," is created, the ",(0,i.jsx)(n.code,{children:"ApiSpec"})," implementation will implement the appropriate ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," for each component,\nallowing you to call DSL functions."]}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s examine the ",(0,i.jsx)(n.code,{children:"ApiComponent"})," implementations and ",(0,i.jsx)(n.code,{children:"ApiField"})," properties generated after mapping the API to a handler:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'public object ExampleApiResponseBody : BodyComponent(false) {  \n  public val `data`: JsonField = JsonField("data", false, 0)  \n  \n  init {  \n    addFields(  \n      `data`  \n    )  \n  }  \n}  \n  \npublic object ExampleApiQueryParameter : ApiComponent<ParameterDescriptor>() {  \n  public val id: QueryParameterField = QueryParameterField("id")  \n  \n  public val num: QueryParameterField = QueryParameterField("num")  \n  \n  init {  \n    addFields(  \n      `id`,  \n      `num`  \n    )  \n  }  \n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Two ",(0,i.jsx)(n.code,{children:"ApiComponent"})," implementations, ",(0,i.jsx)(n.code,{children:"ExampleApiResponseBody"})," and ",(0,i.jsx)(n.code,{children:"ExampleApiQueryParameter"}),", were generated.\nEach holds the fields as ",(0,i.jsx)(n.code,{children:"ApiField"}),"-typed properties corresponding to their respective components."]}),"\n",(0,i.jsxs)(n.p,{children:["These generated ",(0,i.jsx)(n.code,{children:"ApiComponent"}),"s are then declared as type parameters for ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," implementations,\nwhich are invoked in the ",(0,i.jsx)(n.code,{children:"ApiSpec"})," implementation to call the appropriate ",(0,i.jsx)(n.a,{href:"#http-component-dsl",children:"DSL functions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's now look at the ",(0,i.jsx)(n.code,{children:"ApiSpec"})," generated:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"public data class ExampleApiSpec(  \n  override val identifier: String,  \n) : ApiSpec,  \n    ResponseBodySnippetGenerator<ExampleApiResponseBody>,  \n    QueryParameterSnippetGenerator<ExampleApiQueryParameter> {  \n  override val snippets: MutableList<Snippet> = mutableListOf()  \n  \n  override fun getResponseBodyApiComponent(): ExampleApiResponseBody = ExampleApiResponseBody  \n  \n  override fun getQueryParameterApiComponent(): ExampleApiQueryParameter = ExampleApiQueryParameter  \n  \n  override fun addSnippet(generatedSnippet: Snippet) {  \n    this.snippets.add(generatedSnippet)  \n  }  \n  \n  override fun addSnippets(generatedSnippets: List<Snippet>) {  \n    this.snippets.addAll(generatedSnippets)  \n  }  \n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This HTTP API only includes query parameters and a response body, so the ",(0,i.jsx)(n.code,{children:"ApiSpec"})," implementation,\n",(0,i.jsx)(n.code,{children:"ExampleApiSpec"}),", implements the corresponding ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," interfaces."]}),"\n",(0,i.jsxs)(n.p,{children:["Each ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," implementation has appropriately named functions.\nFor example, ",(0,i.jsx)(n.code,{children:"ResponseBodySnippetGenerator"})," has the ",(0,i.jsx)(n.code,{children:"responseBody"})," function,\nand ",(0,i.jsx)(n.code,{children:"QueryParameterSnippetGenerator"})," has the ",(0,i.jsx)(n.code,{children:"queryParameters"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"interface QueryParameterSnippetGenerator<C: ApiComponent<ParameterDescriptor>> : SnippetGenerator {\n\n    fun queryParameters(dsl: C.() -> Unit) {\n        ...\n    }\n    ...\n}\n\ninterface ResponseBodySnippetGenerator<C: BodyComponent> : SnippetGenerator {\n\n    fun responseBody(dsl: C.(element: C) -> Unit) {\n        ...\n    }\n    ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["These functions take as parameters functions that have the type declared in the type parameter as the receiver.\nSince the type parameter is of ",(0,i.jsx)(n.code,{children:"ApiComponent"})," type and ",(0,i.jsx)(n.code,{children:"ApiComponent"})," contains ",(0,i.jsx)(n.code,{children:"ApiField"})," properties,\nyou can call ",(0,i.jsx)(n.a,{href:"#component-dsl",children:"Component DSL"})," functions using those properties within the function block."]}),"\n",(0,i.jsx)(n.h2,{id:"http-component-dsl",children:"HTTP Component DSL"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned earlier, the HTTP components constituting requests and responses can be documented\nusing DSL through the functions of ",(0,i.jsx)(n.code,{children:"SnippetGenerator"})," implementations."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"HTTP Component"}),(0,i.jsx)(n.th,{children:"Implementation"}),(0,i.jsx)(n.th,{children:"Function Name"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Path Variables"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PathVariableSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pathVariables"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Parameters"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"QueryParameterSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"queryParameters"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Headers"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RequestHeaderSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestHeaders"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Cookies"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RequestCookieSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestCookies"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Parts"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RequestPartSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestParts"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request Body"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RequestBodySnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestBody"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Response Headers"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ResponseHeaderSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"responseHeaders"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Response Cookies"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RequestCookieSnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"responseCookies"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Response Body"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ResponseBodySnippetGenerator"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"responseBody"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["If an API includes request headers and both request and response bodies,\nthe ",(0,i.jsx)(n.code,{children:"ApiSpec"})," implementation will implement ",(0,i.jsx)(n.code,{children:"RequestHeaderSnippetGenerator"}),", ",(0,i.jsx)(n.code,{children:"RequestBodySnippetGenerator"}),",\nand ",(0,i.jsx)(n.code,{children:"ResponseBodySnippetGenerator"}),". Consequently, you can call the DSL functions as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'document(SimpleUsageApiSpec("simple-usage")) {\n    requestHeaders { ... }\n    requestBody { ... }\n    responseBody { ... }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"component-dsl",children:"Component DSL"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned, the fields constituting an HTTP component are handled as ",(0,i.jsx)(n.code,{children:"ApiField"})," properties,\ncorresponding to Spring REST Docs' ",(0,i.jsx)(n.code,{children:"AbstractDescriptor"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'responseBody { \n    result means "Whether the login was successful" typeOf STRING formattedAs "Success or Failure"\n    status means "User\'s status" typeOf ENUM(UserStatus::class)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This example demonstrates how to document the ",(0,i.jsx)(n.code,{children:"result"})," and ",(0,i.jsx)(n.code,{children:"status"})," fields using the DSL.\nThe DSL uses infix notations, and all functions return ",(0,i.jsx)(n.code,{children:"ApiField"})," itself, enabling chaining."]}),"\n",(0,i.jsx)(n.h3,{id:"available-infix-notations",children:"Available infix notations"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Function Name"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Parameter Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"means"})}),(0,i.jsxs)(n.td,{children:["Provides a description for the element. Corresponds to ",(0,i.jsx)(n.code,{children:"AbstractDescriptor.description"}),"."]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"typeOf"})}),(0,i.jsxs)(n.td,{children:["Specifies the type of the element. Corresponds to ",(0,i.jsx)(n.code,{children:"org.springframework.restdocs.payload.FieldDescriptor.type"}),". If the type isn't ",(0,i.jsx)(n.code,{children:"FieldDescriptor"}),", it is passed to the ",(0,i.jsx)(n.code,{children:"formattedAs"})," function."]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ApiFieldType"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"formattedAs"})}),(0,i.jsxs)(n.td,{children:["Adds the given ",(0,i.jsx)(n.code,{children:"format"})," string to the ",(0,i.jsx)(n.code,{children:"AbstractDescriptor.attributes"})," with the ",(0,i.jsx)(n.code,{children:"format"})," key."]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isIgnored"})}),(0,i.jsxs)(n.td,{children:["Ignores the element in the documentation. Corresponds to ",(0,i.jsx)(n.code,{children:"org.springframework.restdocs.snippet.IgnorableDescriptor.ignored"}),"."]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Boolean"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isOptional"})}),(0,i.jsxs)(n.td,{children:["Marks the element as optional. Corresponds to ",(0,i.jsx)(n.code,{children:"optional()"})," in each ",(0,i.jsx)(n.code,{children:"AbstractDescriptor"})," implementation."]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Boolean"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"apifieldtype",children:"ApiFieldType"}),"\n",(0,i.jsxs)(n.p,{children:["This class is a wrapper around ",(0,i.jsx)(n.code,{children:"JsonFieldType"})," and is designed to simplify the documentation of commonly used formats."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'open class ApiFieldType(\n    val fieldType: JsonFieldType,\n    open val customFormat: String? = null\n)\n\ndata object ARRAY: ApiFieldType(JsonFieldType.ARRAY)\ndata object BOOLEAN: ApiFieldType(JsonFieldType.BOOLEAN)\ndata object OBJECT: ApiFieldType(JsonFieldType.OBJECT)\ndata object NUMBER: ApiFieldType(JsonFieldType.NUMBER)\ndata object NULL: ApiFieldType(JsonFieldType.NULL)\ndata object STRING: ApiFieldType(JsonFieldType.STRING)\ndata object ANY: ApiFieldType(JsonFieldType.VARIES)\ndata object DATE: ApiFieldType(JsonFieldType.STRING, "yyyy-MM-dd")\ndata object DATETIME: ApiFieldType(JsonFieldType.STRING, "yyyy-MM-ddTHH:mm:ss")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Each ",(0,i.jsx)(n.code,{children:"ApiFieldType"})," implementation adds the value of the ",(0,i.jsx)(n.code,{children:"customFormat"})," property as a format attribute\nwhen implementing the ",(0,i.jsx)(n.code,{children:"typeOf"})," function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"override infix fun typeOf(type: ApiFieldType): JsonField {\n    descriptor.type(type.fieldType)\n    if (type.customFormat != null) descriptor.format(type.customFormat!!)\n    return this\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function is implemented in ",(0,i.jsx)(n.code,{children:"JsonField"}),". For objects like ",(0,i.jsx)(n.code,{children:"DATE"})," and ",(0,i.jsx)(n.code,{children:"DATETIME"})," that have a ",(0,i.jsx)(n.code,{children:"customFormat"}),",\nthe corresponding value is added to the format attribute."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'data object UUID: ApiFieldType(JsonFieldType.STRING, "UUID format")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If there are custom formats frequently used in your project,\nyou can extend ",(0,i.jsx)(n.code,{children:"ApiFieldType"})," and create your own, like the example above."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'data class ENUM<T : Enum<T>>(\n    val enums: Collection<T>,\n    override val customFormat: String? = enums.joinToString(", "),\n) : ApiFieldType(JsonFieldType.STRING) {\n\n    constructor(\n        clazz: KClass<T>,\n        filter: (T.() -> Boolean)? = null\n    ) : this(\n        enums = clazz.java.enumConstants.asList().let {\n            if (filter != null) it.filter(filter) else it\n        },\n    )\n\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A convenience object is also provided for ",(0,i.jsx)(n.code,{children:"Enum"})," types, making it easier to document them."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'enumValue means "enum" typeOf ENUM(listOf(EnumExample.A, EnumExample.B))\nenumValue means "enum" typeOf ENUM(EnumExample::class) { isA() || isB() }\n'})}),"\n",(0,i.jsx)(n.p,{children:"Two constructors allow you to specify possible values. The first line provides a list of possible values directly,\nwhile the second line filters the possible values by calling functions defined in the Enum."}),"\n",(0,i.jsx)(n.h3,{id:"nested-json-fields",children:"Nested JSON Fields"}),"\n",(0,i.jsx)(n.p,{children:"JSON fields can be simple values like strings or numbers,\nbut they can also represent nested objects or arrays of objects."}),"\n",(0,i.jsxs)(n.p,{children:["Spring REST Docs allows you to document these nested fields using ",(0,i.jsx)(n.code,{children:"subsectionWithPath"})," or ",(0,i.jsx)(n.code,{children:"beneathPath"}),".\nHowever, this library provides a more elegant way to document nested fields."]}),"\n",(0,i.jsxs)(n.p,{children:["If a field is nested, it will be declared as a ",(0,i.jsx)(n.code,{children:"NestedJsonField"})," or ",(0,i.jsx)(n.code,{children:"NestedArrayJsonField"})," property.\n",(0,i.jsx)(n.code,{children:"NestedArrayJsonField"})," extends ",(0,i.jsx)(n.code,{children:"NestedJsonField"}),", and this class supports nested object DSL through the ",(0,i.jsx)(n.code,{children:"of"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'responseBody { \n    result means "Whether the login was successful" typeOf STRING formattedAs "Success or Failure"\n    status means "User\'s status" typeOf ENUM(ExampleController.SimpleResponse.UserStatus::class)\n    detail means "User\'s detail information" typeOf OBJECT of {\n        userId means "User\'s id" typeOf STRING\n        password means "User\'s password" typeOf STRING isIgnored true\n        profileMessage means "User\'s profile message" typeOf STRING isOptional true\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, the ",(0,i.jsx)(n.code,{children:"detail"})," field is a nested object field.\nYou can document its fields using the ",(0,i.jsx)(n.code,{children:"of"})," function, as shown."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"infix fun of(nestedFieldDetailDsl: E.() -> Unit) {\n    nestedElement.nestedFieldDetailDsl()\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"of"})," function takes a function as a parameter,\nwhere the type parameter ",(0,i.jsx)(n.code,{children:"E"})," is an ",(0,i.jsx)(n.code,{children:"ApiComponent"})," implementation\nthat holds the nested object's fields as ",(0,i.jsx)(n.code,{children:"JsonField"})," properties."]}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s look at the generated ",(0,i.jsx)(n.code,{children:"ApiComponent"})," implementation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'public object SimpleUsageApiResponseBody : BodyComponent(false) {\n\n  ...\n  \n  public val detail: NestedJsonField<SimpleDetail_0> = NestedJsonField("detail", SimpleDetail_0,\n      false, 0)\n\n  ...\n  \n  public object SimpleDetail_0 : BodyComponent(false) {\n    public val userId: JsonField = JsonField("userId", false, 0)\n\n    public val password: JsonField = JsonField("password", false, 0)\n\n    public val profileMessage: JsonField = JsonField("profileMessage", false, 0)\n\n    ...\n    \n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"detail"})," property is declared as a ",(0,i.jsx)(n.code,{children:"NestedJsonField"}),", with ",(0,i.jsx)(n.code,{children:"SimpleDetail_0"})," passed as the type parameter."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SimpleDetail_0"})," is an implementation of ",(0,i.jsx)(n.code,{children:"BodyComponent"}),", holding the nested fields as properties.\nAs with other JSON data, you can use DSL to document these fields."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},9762:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/structure-446e756a8a0b37ee500bf3d71e11518d.png"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},d=i.createContext(t);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);